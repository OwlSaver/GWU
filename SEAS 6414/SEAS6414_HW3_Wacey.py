
'''





6. Create a 2D matrix from a given 1D array using specific window length and strides.
Problem Statement:
Consider the following 1D NumPy array named ‘arr‘. Your task is to write a Python
program using NumPy to transform ‘arr‘ into a 2D matrix. The matrix should be
constructed by applying a sliding window approach with a specified window length
and stride.
Task Details:
1. Given a 1D NumPy array ‘arr‘.
2. Create a 2D matrix where each row is generated by sliding a window of length
4 over ‘arr‘.
3. The stride for the sliding window should be 2 elements.
4. Example: If ‘arr‘ is [0, 1, 2, 3, 4, 5, 6, 7, 8, . . .], the resulting matrix should be:





0 1 2 3
2 3 4 5
4 5 6 7
.
.
.
.
.
.
.
.
.
.
.
.





Page 3
Submission:
• Provide the Python code for generating the 2D matrix from ‘arr‘.
7. Develop a NumPy program to compute one-hot encodings for a given array.
Problem Statement:
One-hot encoding is a process by which categorical variables are converted into a
binary (0 or 1) matrix. Your task is to write a Python function using NumPy to
create one-hot encodings for each unique value in a given array.
Task Details:
1. Given the 1D NumPy array: array([2, 3, 2, 4, 1, 2]).
2. Your function should compute the one-hot encoding for this array.
3. Each unique value in the array should correspond to a column in the resulting
binary matrix.
Example:
• Input Array: array([2, 3, 2, 4, 1, 2])
• One-Hot Encoding Output:








0 1 0 0
0 0 1 0
0 1 0 0
0 0 0 1
1 0 0 0
0 1 0 0








Submission:
• Provide the Python code for your one-hot encoding function. The ONLY library
you should import to solve this problem is Numpy.


'''





#######################################################################################
# This file has the problem statement and code solution for each problem. They are
# stored in Python multi line strings. The function DoProblem prints the problem
# statement, prints the code and then uses the exec() function to execute the code.
# This worked fine for problems 1-8. For problem 9, the calling of functions defined 
# in the exec() did not work. So, it is slighly different.
#######################################################################################
def DoProblem(ProblemDescription, ProblemCode):
    print(ProblemDescription)
    print("Code:")
    print(ProblemCode)
    print("Execution:")
    print("")
    exec(ProblemCode)

P1Text = """
#######################################################################################
# Problem 1
#######################################################################################

Problem:

Use NumPy to identify unique elements in an array and count their occurrences.
Problem Statement:
  Given the NumPy array:
  x = [3, 1, 4, 2, 4, 3, 6, 1, 2, 5, 5, 6, 2, 3]

  Write a Python function using NumPy to accomplish the following tasks:
  1. Extract an array of unique elements from array x.
  2. Create an array representing the count of each unique element in x.

  Expected Output:
  For the provided array x, your function should return:
  - Unique elements array: [1, 2, 3, 4, 5, 6]
  - Counts array: [2, 3, 3, 2, 2, 2]
"""
P1Code = """
import numpy as np
def UniqueElements(anArray):
  import numpy as np
  ue, ca = np.unique(anArray,return_counts = True)
  print(f"Unique elements array: {ue}")
  print(f"Counts array: {ca}")
x = np.array([3, 1, 4, 2, 4, 3, 6, 1, 2, 5, 5, 6, 2, 3])
UniqueElements(x)
"""
DoProblem(P1Text, P1Code)

P2Text = """
#######################################################################################
# Problem 2
#######################################################################################

Problem:

2. Generate a series of normal random variables for different sample sizes and compute
their averages.
Task:
- For each N in {5, 20, 100, 500, 2000, 50000}, generate N normal random
  variables.
- Each set of random variables should have a mean of 10 and a standard deviation
  of 5.
- Compute the average of these random variables for each N.
- Store the averages in a NumPy array.
- Additionally, write the results to a file using NumPy's save function.
Provide a printout of the final array. (Note: You do not need to submit the file
itself.)

Expected Output: A NumPy array containing the average values for each specified
N.
"""
P2Code = """
import numpy as np
S = {5, 20, 100, 500, 2000, 50000}
T = np.array([np.average(np.random.normal(10,5,N)) for N in S])
np.save('.\\HW3Output.npy',T)
print(T)

"""
DoProblem(P2Text, P2Code)

P3Text = """
#######################################################################################
# Problem 3
#######################################################################################

Problem:


Implement a NumPy program to pad strings with leading zeros to create a uniform
numeric string length.

Task Description:
- Given an array of string elements representing numbers, transform each element
  into a 5-digit numeric string.
- Pad strings with fewer than 5 digits with leading zeros.
- Strings with 5 or more digits should remain unchanged.

Example:
- Original Array: ['2', '11', '234', '1234', '12345']
- Formatted Output: ['00002', '00011', '00234', '01234', '12345']

Implementation Requirement:
- Utilize NumPy's capabilities for efficient string manipulation and array processing.
"""
P3Code = """
import numpy as np
def PadTo5(anArray):
    import numpy as np
    mask = np.char.str_len(anArray) < 6    # Needed because zfill will truncate everything to 5
    anArray[mask] = np.char.zfill(anArray[mask], 5)
    return anArray
X = np.array(['2', '11', '234', '1234', '12345'])
print(f"Original Array: {X}")
Y = PadTo5(X)
print(f"Formatted Output: {Y}")
M = np.array(['2', '11', '234', '1234', '12345', '1234567'])
print(f"Original Array: {M}")
N = PadTo5(M)
print(f"Formatted Output: {N}")
"""
DoProblem(P3Text, P3Code)

P4Text = """
#######################################################################################
# Problem 4
#######################################################################################

Problem:

Implement a Python function using NumPy to convert Cartesian coordinates to polar
coordinates.

Task Details:
- Generate a random 10x2 matrix using NumPy, where each row represents a
  Cartesian coordinate (x, y).
- Develop a function to convert these Cartesian coordinates into polar coordinates
  (r, θ).
- The polar coordinates should be calculated as follows:
  - r = sqroot(x**2 + y**2)  (radial distance)
  - θ = arctan(y/x) (angle in radians)
- The function should return a new 10x2 matrix with polar coordinates.

Example: For a point (x, y) in the Cartesian coordinate system, the corresponding
polar coordinates (r, θ) should be computed and stored in the resulting matrix.
"""
P4Code = """
import numpy as np
def Cart2Polar(cartArray):
  import numpy as np
  polarArray = cartArray.copy()
  for i in range(cartArray.shape[0]):
    polarArray[i,0]=np.sqrt((cartArray[i,0]**2) + (cartArray[i,1]**2))
    polarArray[i,1]=np.arctan(cartArray[i,1]/cartArray[i,0])
  return polarArray
cartArray = np.random.uniform(-100,100,(10,2))
polarArray = Cart2Polar(cartArray)
np.set_printoptions(suppress=True,precision=4)
print("Cartesian")
print(cartArray)
print("Polar")
print(polarArray)
"""
DoProblem(P4Text, P4Code)

P5Text = """
#######################################################################################
# Problem 5
#######################################################################################

Problem:

Manually compute the covariance matrix of two given datasets without using the
built-in 'numpy.cov' function.

Task Description:
- Given two 1D NumPy arrays x and y, representing two different datasets.
- Write a Python function using NumPy to calculate the covariance matrix of x
  and y.
- The function should manually compute the covariance values, without utilizing
  the 'numpy.cov' function.
- Validate your function by comparing its output with manually computed covariance values.

Covariance Formula:
- The covariance between two variables x and y can be computed as:
        
        Cov(x,y)=E[(x-Ex)(y-Ey)]=E[xy]-(Ex)(Ey).


        cov(x, y) = Sum()
Pn
i=1(xi − x¯)(yi − y¯)
n − 1
where ¯x and ¯y are the means of x and y, respectively, and n is the number of
elements in each dataset.

Expected Output:
- A 2x2 covariance matrix representing the covariance between x and y.
"""
P5Code = """
D = {"Jake" : [99, 87, 91, 77], "Charlie" : [100, 100, 99], "Ellen" : [95, 70, 85, 100, 100]}
C = {key : sum(value) / len(value) for key, value in D.items()}
print(C)
"""
DoProblem(P5Text, P5Code)

P6Text = """
#######################################################################################
# Problem 6
#######################################################################################

Problem:

Develop a Python program to filter and store specific words from a sentence. Follow
these steps:
- Split the given sentence into individual words.
- Use the strip method to remove punctuation from each word.
- Utilize the append method to add words to a new list, but only include those
  that are longer than 5 letters.

Given Sentence: "Tom enjoyed reading books on philosophy. He often pondered
the deeper meanings of life, especially during quiet nights."

Requirements:
- Create a list of all words in the sentence that exceed 5 letters in length.
- Ensure punctuation is excluded when determining the length of each word.

This exercise aims to enhance your skills in string manipulation, list handling, and
conditional logic in Python.
"""
P6Code = """
sentence = "Tom enjoyed reading books on philosophy. He often pondered the deeper meanings of life, especially during quiet nights."
words1 = sentence.split()
outWords = []
for word in words1:
    cleanWord = word.strip(".,")
    if len(cleanWord) > 5:
        outWords.append(cleanWord)
print(outWords)
"""
DoProblem(P6Text, P6Code)

P7Text = """
#######################################################################################
# Problem 7
#######################################################################################

Problem:

Write a Python program to count words starting with a vowel in a sentence. The
program should be adaptable to any given sentence. Employ the split, replace,
and lower methods for this task.
Sample Sentence: "During her summer vacation, Alice explored various historical
sites and enjoyed local cuisines."
Task Objectives:
- Process the sentence to identify and count words beginning with a vowel (a, e,
  i, o, u).
- Ensure the program can handle different sentences and is not case-sensitive.
- Use string methods split to separate words, replace to remove punctuation,
  and lower to standardize all characters to lowercase.
Note: This exercise focuses on enhancing your string processing skills and understanding of basic Python string methods.
"""
P7Code = """
def countVowels(aSentence):
    retval = 0
    wordList = aSentence.split()
    for word in wordList:
        if word.replace(",","").replace(".","").replace("?","").lower()[0] in "aeiou":
            retval += 1
    return retval
S = "During her summer vacation, Alice explored various historical sites and enjoyed local cuisines."
print(f"The sentence '{S}' has {countVowels(S)} words that begin with a vowel.")
S = "What time is it in Japan when it is 8:00 AM in Albania?"
print(f"The sentence '{S}' has {countVowels(S)} words that begin with a vowel.")
S = "Eager elephants eagerly enjoy eating enormous, exquisite, exotic apples every evening."
print(f"The sentence '{S}' has {countVowels(S)} words that begin with a vowel.")
"""
DoProblem(P7Text, P7Code)